import type { NextPage } from "next";
import Head from "next/head";
import { signIn, signOut } from "next-auth/react";
import the9GAGComments from "~/db/9gag.json" assert { type: "json" };


import { api } from "~/utils/api";
import type { ScrappedCommentDB } from "~/pages/api/crones/scrapper/common-types";

const PostCard: React.FC<{
  post: ScrappedCommentDB;
  onPostDelete?: () => void;
}> = ({ post }) => {

  return (
    <div className="flex flex-row rounded-lg bg-white/20 p-4 transition-all hover:scale-[101%]">
      <div className="flex-grow">
        <h2 className="text-xl font-bold text-pink-400">{post.body}</h2>
        <a href={post.sourceUrl} target="_blank" className="mt-2 text-cyan-600 text-sm">{post.refTitle}</a>
        {post.mediaUrl && (
          <img
            className="mt-2 rounded-lg"
            src={post.mediaUrl}
            width={500}
            height={500}
          />
        )}
      </div>
      <div>
        <span
          className="cursor-pointer text-sm font-bold uppercase text-pink-400"
        >
          {post.upVoteCount}
        </span>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container mt-12 flex flex-col items-center justify-center gap-4 px-4 py-8">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            Comments from the web
          </h1>

          {the9GAGComments ? (
            <div className="w-full max-w-2xl">
              {the9GAGComments?.length === 0 ? (
                <span>There are no posts!</span>
              ) : (
                <div className="flex  justify-center px-4 text-2xl">
                  <div className="flex w-full flex-col gap-4">
                    {the9GAGComments?.map((p) => {
                      return (
                        <PostCard
                          key={p.id}
                          post={p}
                        />
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <p>Loading...</p>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: session } = api.auth.getSession.useQuery();

  const { data: secretMessage } = api.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: !!session?.user }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {session?.user && (
        <p className="text-center text-2xl text-white">
          {session && <span>Logged in as {session?.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>}
        </p>
      )}
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={session ? () => void signOut() : () => void signIn()}
      >
        {session ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
